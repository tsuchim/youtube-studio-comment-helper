name: Build and attach release artifact

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (must match package.json & manifest.json)'
        required: true

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate manifest & lint
        run: npm run build

      - name: Build zip
        run: npm run build:zip

      - name: Derive version and expected zip name
        id: meta
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "pkg_version=$PKG_VERSION" >> $GITHUB_OUTPUT
          ZIP=dist/youtube-studio-comment-helper-v$PKG_VERSION.zip
          if [ ! -f "$ZIP" ]; then
            echo "Archive $ZIP not found" >&2
            exit 1
          fi
          echo "zip_path=$ZIP" >> $GITHUB_OUTPUT

      - name: Generate SHA256 checksum
        run: |
          sha256sum "${{ steps.meta.outputs.zip_path }}" > "${{ steps.meta.outputs.zip_path }}.sha256"

      - name: Upload artifact (workflow run)
        uses: actions/upload-artifact@v4
        with:
          name: youtube-studio-comment-helper-${{ steps.meta.outputs.pkg_version }}
          path: |
            ${{ steps.meta.outputs.zip_path }}
            ${{ steps.meta.outputs.zip_path }}.sha256

      - name: Create or update GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            ${{ steps.meta.outputs.zip_path }}
            ${{ steps.meta.outputs.zip_path }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify manifest/package.json version alignment
        run: |
          MANIFEST_VERSION=$(node -p "require('./manifest.json').version")
          PKG_VERSION=${{ steps.meta.outputs.pkg_version }}
          if [ "$MANIFEST_VERSION" != "$PKG_VERSION" ]; then
            echo "Version mismatch manifest.json($MANIFEST_VERSION) != package.json($PKG_VERSION)" >&2
            exit 1
          fi
